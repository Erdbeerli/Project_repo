
import streamlit as st
import numpy as np
from PIL import Image
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
import requests
import pandas as pd


def fetch_plant_data():
    """
    Fetch plant data from OpenFarm API.
    """
    url = "https://openfarm.cc/api/v1/crops"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        plants = []
        for plant in data['data']:
            attributes = plant['attributes']
            plants.append({
                "plant_name": attributes.get("name", "Unknown"),
                "sun_requirements": attributes.get("sun_requirements", "unknown"),
                "spread": attributes.get("spread", "unknown"),
                "description": attributes.get("description", "No description available")
            })
        return pd.DataFrame(plants)
    else:
        st.error("Failed to fetch plant data from OpenFarm API.")
        return pd.DataFrame()  # Leerer DataFrame bei Fehler


plants_df = fetch_plant_data()


if not plants_df.empty:
    st.write("ðŸŒ± Plant data loaded successfully!")
    st.write(plants_df.head())
else:
    st.warning("No plant data available.")

# Funktion zur Initialisierung des Machine-Learning-Modells
def initialize_ml_model(df):
    """
    Train a machine learning model using plant data.
    """
    if df.empty:
        st.error("No data available for training the ML model.")
        return None, None

    # Filtere gÃ¼ltige EintrÃ¤ge mit bekannten Sonnenanforderungen und Spread-Werten
    df = df[df["sun_requirements"] != "unknown"]
    df = df[df["spread"] != "unknown"]
    df["spread"] = pd.to_numeric(df["spread"], errors="coerce")
    df = df.dropna(subset=["spread"])

    # Label-Encoding der Sonnenanforderungen
    le_sun = LabelEncoder()
    df["sun_encoded"] = le_sun.fit_transform(df["sun_requirements"])

    # Features und Labels
    X = df[["sun_encoded", "spread"]]
    y = df["plant_name"]

    # Modelltraining
    model = RandomForestClassifier(random_state=42)
    model.fit(X, y)
    return model, le_sun

# Initialisiere das Modell
model, le_sun = initialize_ml_model(plants_df)

# Funktion fÃ¼r die Bildanalyse
def analyze_image(image):
    """
    Analyze the uploaded image to extract light conditions and space type.
    """
    if model is None or le_sun is None:
        st.error("ML model is not initialized.")
        return "No recommendation"

    # Abmessungen des Bildes
    width, height = image.size
    st.write(f"Image Dimensions: {width} x {height}")

    # Umwandeln in ein NumPy-Array fÃ¼r Farbstatistiken
    image_array = np.array(image)
    avg_color = image_array.mean(axis=(0, 1))  # Durchschnittsfarbe
    st.write(f"Average Color (RGB): {avg_color}")

    # Einfache Analyse basierend auf der Helligkeit
    brightness = avg_color.mean()  # Durchschnittswert fÃ¼r Helligkeit
    if brightness > 200:
        light_condition = "full sun"
    elif brightness > 100:
        light_condition = "partial sun"
    else:
        light_condition = "shade"

    # Platz basierend auf BildgrÃ¶ÃŸe (Dummy-Annahme)
    if width > 1000 and height > 1000:
        space = 150  # Viel Platz
    elif width > 500 and height > 500:
        space = 50  # Mittlerer Platz
    else:
        space = 20  # Wenig Platz

    st.write(f"Detected Light Condition: {light_condition}")
    st.write(f"Detected Space: {space} cm")

    # Vorhersage durch das Modell
    if light_condition in le_sun.classes_:
        light_encoded = le_sun.transform([light_condition])[0]
        input_data = np.array([[light_encoded, space]])
        predicted_plant = model.predict(input_data)[0]
        return predicted_plant
    else:
        st.warning("Detected light condition is not recognized.")
        return "No recommendation"

# Bildbasierte ML-Seite
def image_based_ml():
    st.title("Image-Based Plant Recommendation")
    st.subheader("Upload an image of your garden or space to get plant recommendations")

    # Bild hochladen
    uploaded_image = st.file_uploader("Upload an image:", type=["jpg", "png", "jpeg"])
    if uploaded_image:
        try:
            image = Image.open(uploaded_image)
            st.image(image, caption="Uploaded Image", use_column_width=True)

            # Bildanalyse durchfÃ¼hren
            recommended_plant = analyze_image(image)

            # Ergebnis anzeigen
            st.subheader(f"ðŸŒ± Recommended Plant: **{recommended_plant}**")
        except Exception as e:
            st.error(f"An error occurred while processing the image: {e}")

# Hauptnavigation
def main():
    st.sidebar.title("Navigation")
    page = st.sidebar.radio("Go to", ["Photo-Based ML"])
    if page == "Photo-Based ML":
        image_based_ml()

# Run the application
main()
